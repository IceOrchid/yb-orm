
0.3.3
    * Replace method data_object() with get_data_object() in methods find() and insert().
    * Rename some files to follow common style and to better reflect contents.
    * Fixed a bug per request from nbuyvich: chained property references.
    * fix delete_object() to behave properly when deleting a row from a link-table (n-to-n relation).
    * fix yborm_gen: default value setter
    * Fixed a bug per request from nbuyvich: Make it work: pg1->parent->id.is_null()
    * Fixes to build under MacOSX.
    * Add tut4.cpp: tree structure stored in a table. Fixes to make it work.

0.3.2
    * New more intuitive syntax for filters in queries:
      it's done via operator overloading.
    * Domain classes now have static variable 'c' for convenient
      metadata referencing, useful e.g. for filtering.
    * When querying a tuple of Domain classes there will be issued
      a query with join of corresponding tables.
    * Query object now has got methods .one() and .count()
      in addition to old method .all().
    * Added Tutorial3: Querying objects.
    * Fix subtle bug with compiler reordering function calls that leads to
      wrong parameter orders.
    * Fix assertion with re-adding object into session.
    * Fix: Session must always do rollback on releasing Engine.
    * Auth sample: Improve App class, use theApp::instance().new_session()
      for creating sessions.

0.3.1
    * Integrate native SQLITE driver for use in non-QT builds.
      Now this driver is used in Windows examples by default.
      Thanx to Andrey Skobenkov.
    * Improved logging in the ORM core.
    * Support URL for specifying connection thruout the examples
      and the build system.
      Now it's possible to just use --with-test-db-url option
      and YBORM_URL environment variable.
    * Applied patches from Sebastian Lauwers,
      See closed tasks here: http://code.google.com/p/yb-orm/issues
    * Fixed Session::flush_delete(): respect the depth.
    * Fixed Engine::on_delete(): once prepare, many times exec.
    * Cleaned up MetaData classes' interfaces for sake of convenience.
      Now the generated code looks more readable.
    * New class Expression replaced old Filter class.
      This is the first step to develop a comprehensive query language.
    * For convenience added --with-yborm-root to configure script
      in Auth sample.
    * Application singleton for Auth example.

0.3.0
    * New and more convenient method of access to domain object properties:
      via property-proxy accessors, instead of old setters/getters.
      The generated domain class code becomes much cleaner.
      Property accessors are implemented for simple data types,
      as well as for object references and object collections.
      To implement recurrent object references there is DomainHolder class.
      Take a look at ProductGroup class from examples/ex2_schema.xml.
      I.e. all object references are implemented using DomainHolder, and
      therefore they must be dereferenced using arrow (->), not just dot (.).
      This change breaks the backward compatibility of the generated code.
    * The code generator utility itself is named yborm_gen now and
      and is able to produce C++ domain classes as well as SQL DDL statements.
      No more need for xsltproc tool.  See tutorial1 for example.
      Also, internally the code generator has moved to libyborm.
    * Initial support for SQLite3 dialect, via QtSql driver.
    * Construct SqlSource from URL, using simple URL parser.
      See examples below.
      1) In a QT build there are native drivers
          'sqlite+qtsql:///home/vaclav/test1_db'
          'mysql+qtsql://test1:test1_pwd@localhost:3306/test1_db'
         as well as ODBC driver (used by default)
          'mysql+qodbc3://test1:test1_pwd@test1_db'
          or 'mysql://test1:test1_pwd@test1_db'
      2) In a non-QT build there's only one ODBC driver available yet:
          'mysql+odbc://test1:test1_pwd@test1_db'
          or just 'mysql://test1:test1_pwd@test1_db'
      You can pass single environment variable YBORM_URL to Engine instance,
      instead of combination of YBORM_DBTYPE, YBORM_DRIVER, YBORM_DB,
      YBORM_USER, YBORM_PASSWD environment variables.  This is mostly
      useful for testing.

0.2.5
    * The Big Change: now you can build YB.ORM against wxWidgets or QT,
      and use their native data structures.  Boost and LibXml are not required.
      Look at the "configure" script options, please.
      On Windows cmake script is capable of building with QT from Nokia QT SDK.
    * QT build utilizes native QtSqlDriver instead of OdbcDriver.
    * query<>() function now accepts tuples of Domain classes (boost::tuple),
      useful for joining tables.
    * New method Session::commit() = Session::flush() + Engine::commit().
    * Better support for compound foreign keys.
    * Better diagnostics when yborm_gen_domain checks schema structure.
    * Now the only thread that opens and closes all connections when using
      SqlPool is the monitor thread.
    * Propagate exceptions back from the monitor thread in SqlPool to report
      about 'failed to connect' conditions immediately.
    * Rename SqlConnect -> SqlConnection.
    * Introduce SqlCursor: an SqlConnection now may have more
      than one open SqlCursor (and SqlResultSet).
    * Fix Auth example: Fix micro HTTP server in case the client connection is
      closed unexpectedly. Support POST queries, other than
      application/x-www-form-urlencoded.

0.2.4
    Add SqlPool for database connection pooling, thanx to Nikita Buyvich.
    ResultSet is now able to cache all rows, i.e. not necessary lazy.
    Support for two or more distinct relations on the same
    table using different foreign keys.
    Add support for 32bit integer SQL data type in schema.
    Build script for cmake and mingw.
    Support for Postgres dialect.
    Auth example: Allow to register the first user via link like this:
    http://localhost:9090/registration?login=medved&pass=preved&name=Medved&status=0
    Bugs fixed:
    Fix a long lasted bug with misuse of ODBC function SQLBindParameter.

0.2.3
    Simple logger implementation.
    Reimplemented xml Writer classes from scratch (not using libxml2).
    Replaced Xml::Node with more convenient class ElementTree::Element,
    still depending on libxml2, but not exposing any of its internals.
    Auth is a separate demo project contributed by Nikita Buyvich,
    the project is a minimal HTTP server, which implements a toy auth
    ptotocol using XML.  Look in examples/auth.
    Many bugfixes.

0.2.2
    Build in schema pieces into generated classes.
    Update of autogenerated code now works (AUTOGEN sections only).
    Keep smart pointers to Tables and Relations.
    Automatic registration of domain classes at DomainFactory singleton.
    Wide Unicode partial support.
    Start to work on a tutorial.
    Bugs fixed:
    TestDataObject::test_data_object_relink()
    TestDataObjectSaveLoad::test_flush_new_linked_to_existing()
    TestDataObjectSaveLoad::test_lazy_load_fail()

0.2.1
    Row becomes a vector of named values.
    Diffenetiate save() and save_or_update().
    Implement load_collection() using DataObjectResultSet with iterator.
    Three levels of lazy result sets: SqlResultSet, DataObjectResultSet and
    DomainObjectResultSet template class.

0.2.0
    The Big Change: new internal weak-typed row representation DataObject class
    replaces old RowData class.  Session class has been also rewritten from
    scratch.
    This solves old big problems with how object relations are represented and
    who shall be responsible for holding object reference.
    Now deletion (including cascading) works for objects and relations.

0.1.2
    Document XML metadata format, add 'relation' element for relations
        between classes.
    Initial support for backrefs via managed lists, to make one-to-many
        relationships more usable.

