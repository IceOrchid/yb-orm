<?xml version="1.0" encoding="UTF-8"?>
<!-- 

RU:

<schema> - корневой элемент, может содержать элементы <table> и <relation>.

<table> - элемент описывает структуру таблицы, ее колонки. Имеет следующие
    	атрибуты:
    name - (обязательный) имя таблицы, как в SQL;
    sequence - (опциональный) имя генератора последовательности, который задает
            значения для первичного ключа.  Первичный ключ должен быть
            суррогатным ID.  Если этот атрибут не пустой при использовании с
            реляционной СУБД, не имеющей генераторов (напр. MySQL), то это
            означает, что значения ключа генерируются автоматически;
    class - (опциональный) имя класса, в который нужно отобразить данную
            таблицу;
    xml-name - (опциональный) имя элемента XML, используется
            механизмом AutoXMLizer, если не задан используется имя таблицы,
            приведенное к нижнему регистру, '_' заменяются на '-'.

<column> - элемент <table> содержит один или более элементов <column>, каждый
        из которых описывает одну колонку.  Он имеет следующие атрибуты:
    name - (обязательный) имя колонки, как в SQL;
    type - (обязательный) тип данных колонки, сейчас поддерживаются
            следующие типы данных:
        longint - (как минимум) 64-битное целое число, подходит для разных ID
        decimal - десятичное число с точкой, подходит для хранения денежных
                величин и т.д.
        datetime - временная метка, включает дату и время
        string - строка символов;
    size - (обязательный для типа string, иначе не используется) - максимальная
            длина значения;
    null - (опциональный) если колонке можно присвоить значение NULL, возможные
            значения - "true" и "false".  По умолчанию - "true", если не
            сказано, что колонка входит в состав первичного ключа;
    default - (опциональный) значение по умолчанию, присваиваемое колонке.
            Этот атрибут может содержать константу того типа, который задан в
            атрибуте "type", для типа "datetime" предусмотрено специальное
            значение "sysdate", обозначающее текущие время и дату;
    property - (опциональный) имя атрибута объекта, если оличается от имени
            колонки;
    xml-name - (опциональный) имя элемента XML, используется
            механизмом AutoXMLizer, если не задан используется имя колонки,
            приведенное к нижнему регистру, '_' заменяются на '-'.


Элемент <column> может содержать вложенные элементы, которые описывают
дополнительные ограничения для данной колонки:
<read-only> - колонке значение может быть присвоено лишь при создании,
        последующие попытки обновления приведут к ошибке.
<primary-key> - колонка является первичным ключом или входит в состав сложного
        первичного ключа.
<foreign-key> - колонка ссылается на другие таблицу и колонку, это называется
        ограничением внешнего ключа.  Этот элемент имеет следующие атрибуты:
    table - (обязательный) имя таблицы, на которую ведет ссылка;
    key - (опциональный) имя колонки (ключа) в таблице, на которую ведет
            ссылка, этот атрибут можно опустить, если ключ, на который
            ссылаемся, является первичным.

<relation> - элемент описывает отношения между доменными классами.
        Содержимое этого элемента зависит от типа отношения (определяется
        обязательным атрибутом "type"), который может быть одним из следующих:
        "one-to-many" | "many-to-many" | "parent-to-child".

    "one-to-many" - один-ко-многим, этот тип подразумевает два вложенных
            элемента.
        <one> - класс главной таблицы, атрибуты:
            class - (обязательный) имя класса, отображаемого на главную
                    таблицу;
            property - (опциональный) имя свойства, которое ссылается типично
                    на коллекцию зависимых объектов;
            use-list="false" - (опциональный) использовать вместо коллекции
                    одиночный объект, полезно для представления
                    отношения "один-к-одному".
        <many> - для зависимого класса, атрибуты:
            class - (обязательный) имя класса, отображаемого в зависимую
                    таблицу;
            property - (опциональный) имя свойства, которое ссылается на один
                    главный объект;
            filter - (опциональный) дополнительный фильтр для зависимых
                    записей, которые будут включены в свойство-коллекцию,
                    записан в синтаксисе SQL.
        Примечание: при удалении главного объекта, в том случае, если внешний
                ключ допускает обнуление, то у зависимых объектов ссылка на
                главный объект будет обнулена, иначе зависимые объекты будут
                также удалены.

    "many-to-many" - многие-ко-многим, этот тип подразумевает три вложенных
            элемента двух разных видов.
        <side> - одна из сторон отношения, должны быть два таких элемента
                внутри элемента <relation>.  Возможные атрибуты:
            class - (обязательный) имя класса, отображаемого в одну
                    из двух таблиц;
            property - (опциональный) имя созданного свойства, ссылающегося
                    на другую сторону отношения как на контейнер объектов.
        <link> - укажите имя таблицы связи, она должна иметь внешние ключи,
                ссылающиеся на обе связанные таблицы.  Единственный атрибут:
            table - (обязательный) имя таблицы связи.
        Примечание: таблица связи типично не отображается явно
                ни на один класс.

    "parent-to-child" - родитель-потомок, этот тип подразумевает два вложенных
            элемента.
        <parent> - более общий класс с меньшим количеством свойств. 
                Возможные атрибуты:
            class - (обязательный) имя класса, отображаемого на родительскую
                    таблицу.
            discr-column - (обязательный для самых верхних классов в иерархии)
                    колонка-дискриминант, экземпляры (строки) разных классов
                    должны иметь различные значения дискриминанта.  Если
                    атрибут опущен, ищите его значение в родительских классах.
        <child> - более конкретный класс с большим количеством свойств. 
                Возможные атрибуты:
            class - (обязательный) имя класса, отображаемого на дочернюю
                    таблицу;
            discr-value - (обязательный для конкретных классов) абстрактные
                    классы не могут иметь значение discr-value, и поэтому
                    не могут иметь экземпляров.
        Примечание: если <parent> или <child> ссылаются на класс, не упомянутый
                ни в одной таблице, то будет создан новый класс, отображаемый
                на ту же таблицу, что и его класс-родитель.

EN:

<schema> - root element, it may contain elements <table> and <relation>.

<table> - element describes table name structure, its columns.
        It has the following attributes:
    name - (required) name of the table, as in SQL;
    sequence - (optional) name of sequence used to generate primary key
            values.  Primary key must be a surrogate ID.  When this attribute
            is not empty for an RDBMS without sequences (e.g. MySQL) it means
            that the primary key values are autogenerated;
    class - (optional) name of the class to map the table to;
    xml-name - (optional) name of the XML element, used by the AutoXMLizer,
            if not set then the table's name is used, translated to lower case,
            '_' is substituted with '-'.

<column> - element <table> contains one or more <column> elements, each of
        them describing single column.  It has the following attributes:
    name - (required) name of the column, as in SQL;
    type - (required) type of the column, for now the following types are
            supported:
        longint - 64bit (at least) integer, suitable for IDs
        decimal - decimal number with fraction part, suitable for storing
                money values, etc.
        datetime - timestamp data, with date and time parts
        string - string of characters;
    size - (required for string type, unused otherwise) - maximum length of
            the value;
    null - (optional) if the column may be assigned NULL value, the possible
            values are "true" and "false".  The default is "true" unless the
            column is marked to be a (part of) primary key;
    default - (optional) if the column has a value assigned by default, this
            field may contain a constant of type, specified by the "type"
            attribute, or a special value "sysdate" for "datetime" type
            columns to insert the current date and time;
    property - (optional) name of object's attribute, if it differs from
            column name;
    xml-name - (optional) name of the XML element, used by the AutoXMLizer,
            if not set then the column's name is used, translated to lower case,
            '_' is substituted with '-'.


Also <column> may contain nested elements to describe additional constraints:
<read-only> - the column may be only assigned once created, any subsequent updates
        will produce an error.
<primary-key> - the column is a primary key or is a part of compound primary key.
<foreign-key> - the column refers to another table/column, this is known as
        foreign key constraint.  This element has the following attributes:
    table - (required) table name the column refers to;
    key - (optional) column name in the referenced table, this may be omitted
            if the referenced column is a primary key.

<relation> - element describes relations between domain classes.
        Contents of this element depends on type of relationship specified.
        The required attribute "type" can have one of the following values:
        "one-to-many" | "many-to-many" | "parent-to-child".

    "one-to-many" - this type assumes two nested elements.
        <one> - class for the master table, attributes:
            class - (required) class name, mapped to the master table;
            property - (optional) property name, created to reference typically
                    multiple dependent objects;
            use-list="false" - (optional) use single object property rather
                    than a collection, usable to represent "one-to-one" relation.
        <many> - for the dependent class, attributes:
            class - (required) class name, mapped to the dependent table;
            property - (optional) property name, created to reference single;
                    master object;
            filter - (optional) additional filter for dependent records,
                    which should be included in the property-collection,
                    written using SQL syntax.
        Note: if a master object is deleted then dependent objects will have
                their references nullified if the foreign key field has
                null="true", otherwise the dependent objects will be deleted.

    "many-to-many" - this type assumes three nested elements of two kinds.
        <side> - one side of the relationship, there are two such elements
                within <relation> element. Possible attributes:
            class - (required) class name, mapped to one of the two tables;
            property - (optional) property name, created to reference the
                    other side of the relation as a collection of objects.
        <link> - specify the link table, which must have foreign key
                references to both related tables. The only attribute:
            table - (required) link table name.
        Note: the link table typically should not be mapped to any class.

    "parent-to-child" - this type assumes two nested elements.
        <parent> - more general class having fewer properties.  Possible attributes:
            class - (required) class name, mapped to the parent table;
            discr-column - (required for top-most classes in the hierarchy)
                    discriminant column, instances (rows) of different classes
                    must have different discriminant values.  If omitted then
                    look for discr-column in parent classes.
        <child> - more specific class having more properties. Possible
                attributes:
            class - (required) class name, mapped to the child table;
            discr-value - (required for concrete classes) abstract classes
                    may not have discr-value associated, and therefore they
                    can't be instantiated.
        Note: if <parent> or <child> references a class not directly mapped
                by any table definition, then new class created, it will be
                mapped to the same table as its parent class.
-->

<schema>

    <!-- Relation One-To-Many -->
    <table name="T_CLIENT" sequence="S_CLIENT_ID"
            class="Client" xml-name="client">
        <column name="ID" type="longint">
                <!-- /null="false"/ assummed for a primary key column,
                     otherwise /null="true"/ is the default -->
            <primary-key />
        </column>
        <column name="DT" type="datetime" null="false" default="sysdate" />
        <column name="NAME" type="string" size="100" null="false" />
        <column name="EMAIL" type="string" size="100" null="false" />
        <column name="PHONE" type="string" size="50" null="true" />
        <column name="URL" type="string" size="200" />
        <column name="IS_AGENCY" type="longint" null="false" default="0"
                property="agency_flag" xml-name="agency-flag"/>
    </table>
    <table name="T_ORDER" sequence="S_ORDER_ID"
            class="Order" xml-name="order">
        <column name="ID" type="longint">
            <primary-key />
        </column>
        <column name="DT" type="datetime" default="sysdate">
            <read-only />
        </column>
        <column name="RECEIPT_SUM" type="decimal" default="0" />
        <column name="RECEIPT_DT" type="datetime" />
        <column name="CLIENT_ID" type="longint" null="false">
            <foreign-key table="T_CLIENT" key="ID"/>
                <!-- attribute /key="ID"/ may be omitted if it refers
                     the primary key -->
        </column>
        <column name="TOTAL_SUM" type="decimal" null="false" />
    </table>
    <table name="T_ORDER_ITEM" sequence="S_ORDER_ITEM_ID"
            class="OrderItem" xml-name="order-item">
        <column name="ID" type="longint">
            <primary-key />
        </column>
        <column name="ORDER_ID" type="longint" null="false">
            <foreign-key table="T_ORDER" />
        </column>
        <column name="PRODUCT_ID" type="longint" null="false">
            <foreign-key table="T_PRODUCT" />
        </column>
        <column name="QUANTITY" type="decimal" null="false"/>
        <column name="ORDER_SUM" type="decimal" null="false"/>
        <column name="DISCOUNT_PCT" type="decimal" null="false" default="0"/>
    </table>
    <table name="T_CONTRACT" sequence="S_CONTRACT_ID"
            class="Contract" xml-name="contract">
        <column name="ID" type="longint">
            <primary-key />
        </column>
        <column name="START_DT" type="datetime" null="false" />
        <column name="END_DT" type="datetime" />
        <column name="CTYPE" type="longint" null="false" />
        <column name="SIGNED" type="longint" null="false" default="0" />
        <column name="CLIENT_ID" type="longint" null="false">
            <foreign-key table="T_CLIENT" key="ID" />
        </column>
    </table>
    <relation type="one-to-many">
        <one class="Client" property="orders" />
        <many class="Order" property="owner" />
    </relation>
    <relation type="one-to-many">
        <one class="Order" property="items" />
        <many class="OrderItem" property="order" />
    </relation>
    <relation type="one-to-many">
        <one class="Product" />
        <many class="OrderItem" property="product" />
    </relation>
    <relation type="one-to-many">
        <one class="Client" property="contracts" />
        <many class="Contract" property="client" />
    </relation>
    <relation type="one-to-many">
        <one class="Client" property="signed_contracts" />
        <many class="Contract" filter="SIGNED = 1" />
    </relation>

    <!-- Relation One-To-Many on the same table -->
    <table name="T_PRODUCT_GROUP" sequence="S_PG_ID"
            class="ProductGroup" xml-name="prod-group">
        <column name="ID" type="longint">
            <primary-key />
        </column>
        <column name="PARENT_ID" type="longint" null="true">
            <foreign-key table="T_PRODUCT_GROUP" />
        </column>
        <column name="NAME" type="string" size="100" null="false" />
    </table>
    <table name="T_PRODUCT" sequence="S_PG_ID"
            class="Product" xml-name="product">
        <column name="ID" type="longint">
            <primary-key />
        </column>
        <column name="PARENT_ID" type="longint" null="false">
            <foreign-key table="T_PRODUCT_GROUP" />
        </column>
        <column name="NAME" type="string" size="100" null="false" />
        <column name="PRICE"  type="decimal" null="false" />
    </table>
    <relation type="one-to-many">
        <one class="ProductGroup" property="children" />
        <many class="ProductGroup" property="parent" />
    </relation>
    <relation type="one-to-many">
        <one class="ProductGroup" property="products" />
        <many class="Product" property="parent" />
    </relation>
    <!--
    <relation type="one-to-many">
        <one class="Product" />
        <many class="OrderItem" property="product" />
    </relation>
    -->

    <!-- Relation Many-To-Many -->
    <table name="T_USER" sequence="S_USER_ID" class="User" xml-name="user">
        <column name="ID" type="longint">
            <primary-key />
        </column>
        <column name="NAME" type="string" size="80" null="false" />
        <column name="EMAIL" type="string" size="80" null="false" />
    </table>
    <table name="T_GROUP" sequence="S_GROUP_ID" class="Group" xml-name="group">
        <column name="ID" type="longint">
            <primary-key />
        </column>
        <column name="NAME" type="string" size="80" null="false" />
    </table>
    <table name="T_USER_GROUP">
            <!-- this table is not mapped to any class explicitly -->
        <column name="USER_ID" type="longint">
            <primary-key />
            <foreign-key table="T_USER" />
        </column>
        <column name="GROUP_ID" type="longint">
            <primary-key />
                <!-- more than just one column may be included in PK -->
            <foreign-key table="T_GROUP" />
        </column>
    </table>
    <relation type="many-to-many">
        <side class="User" property="groups" />
        <side class="Group" property="users" />
        <link table="T_USER_GROUP" />
    </relation>

    <!-- Inheritance -->
    <table name="T_PAYMENT" sequence="S_PAYMENT_ID"
            class="Payment" xml-name="payment">
                <!-- parent table -->
        <column name="ID" type="longint">
            <primary-key />
        </column>
        <column name="AMOUNT" type="decimal" null="false" />
        <column name="DT" type="datetime" null="false" default="sysdate" />
        <column name="PAYMENT_DT" type="datetime" />
        <column name="PAYSYS_CODE" type="string" size="20" null="false" />
            <!-- discriminator column: CCARD|WEBMONEY_RU|WEBMONEY_UA -->
    </table>
    <table name="T_CCARD_PAYMENT"
            class="CCardPayment" xml-name="ccard-payment">
                <!-- child table: discr=CCARD -->
        <column name="ID" type="longint">
            <primary-key />
            <foreign-key table="T_PAYMENT" />
        </column>
        <column name="CARD_NUMBER" type="string" size="16" />
        <column name="AUTH_CODE" type="string" size="10" />
        <column name="POSTAUTH_DT" type="datetime" />
    </table>
    <table name="T_WEBMONEY_PAYMENT"
            class="WebMoneyPaymentBase">
                <!-- child table: discr=WEBMONEY_RU|WEBMONEY_UA -->
        <column name="ID" type="longint">
            <primary-key />
            <foreign-key table="T_PAYMENT" />
        </column>
        <column name="PAYER_PURSE" type="string" size="13" />
        <column name="SYS_TRANS_NO" type="longint" />
    </table>
    <relation type="parent-child">
        <parent class="Payment" discr-column="PAYSYS_CODE" />
        <child class="CCardPayment" discr-value="CCARD" />
    </relation>
    <relation type="parent-child">
        <parent class="Payment" discr-column="PAYSYS_CODE" />
        <child class="WebMoneyPaymentBase" />
    </relation>
    <relation type="parent-child">
        <parent class="WebMoneyPaymentBase" />
        <child class="WebMoneyRuPayment" discr-value="WEBMONEY_RU"
                xml-name="webmoney-ru-payment" />
    </relation>
    <relation type="parent-child">
        <parent class="WebMoneyPaymentBase" />
        <child class="WebMoneyUaPayment" discr-value="WEBMONEY_UA"
                xml-name="webmoney-ua-payment" />
    </relation>

</schema>
<!-- vim:ts=4:sts=4:sw=4:et:
-->
