
Below is a brief description of XML format used for metadata.
See also in examples folder.

<schema> - root element, it may contain elements <table> and <relation>.

<table> - element describes table name structure, its columns.
        It has the following attributes:
    name - (required) name of the table, as in SQL;
    sequence - (optional) name of sequence used to generate primary key
            values.  Primary key must be a surrogate ID.  When this attribute
            is not empty for an RDBMS without sequences (e.g. MySQL) it means
            that the primary key values are autogenerated;
    class - (optional) name of the class to map the table to;
    xml-name - (optional) name of the XML element, used by the AutoXMLizer,
            if not set then the table's name is used, translated to lower case,
            '_' is substituted with '-'.

<column> - element <table> contains one or more <column> elements, each of
        them describing single column.  It has the following attributes:
    name - (required) name of the column, as in SQL;
    type - (required) type of the column, for now the following types are
            supported:
        integer - 32bit integer
        longint - 64bit (at least) integer, suitable for IDs
        decimal - decimal number with fraction part, suitable for storing
                money values, etc.
        datetime - timestamp data, with date and time parts
        string - string of characters;
    size - (required for string type, unused otherwise) - maximum length of
            the value;
    null - (optional) if the column may be assigned NULL value, the possible
            values are "true" and "false".  The default is "true" unless the
            column is marked to be a (part of) primary key;
    default - (optional) if the column has a value assigned by default, this
            field may contain a constant of type, specified by the "type"
            attribute, or a special value "sysdate" for "datetime" type
            columns to insert the current date and time;
    property - (optional) name of object's attribute, if it differs from
            column name;
    xml-name - (optional) name of the XML element, used by the AutoXMLizer,
            if not set then the column's name is used, translated to lower case,
            '_' is substituted with '-'.  To disable column output
            set this field to special value '!'.


Also <column> may contain nested elements to describe additional constraints:
<read-only> - the column may be only assigned once created, any subsequent updates
        will produce an error.
<primary-key> - the column is a primary key or is a part of compound primary key.
<foreign-key> - the column refers to another table/column, this is known as
        foreign key constraint.  This element has the following attributes:
    table - (required) table name the column refers to;
    key - (optional) column name in the referenced table, this may be omitted
            if the referenced column is a primary key.

<relation> - element describes relations between domain classes.
        Contents of this element depends on type of relationship specified.
        The required attribute "type" can have one of the following values:
        "one-to-many" | "many-to-many" | "parent-to-child".
        The optional attribute "cascade" defines what action to take
        for the slave records when there is an attempt to delete the master record.
        Possible actions are: "restrict" | "set-null" | "delete".
        NOTE: only "one-to-many" relation type is supported so far.

    "one-to-many" - this type assumes two nested elements.
        <one> - class for the master table, attributes:
            class - (required) class name, mapped to the master table;
            property - (optional) property name, created to reference typically
                    multiple dependent objects;
            use-list="false" - (optional) use single object property rather
                    than a collection, usable to represent "one-to-one" relation.
        <many> - for the dependent class, attributes:
            class - (required) class name, mapped to the dependent table;
            property - (optional) property name, created to reference single;
                    master object;
            filter - (optional) additional filter for dependent records,
                    which should be included in the property-collection,
                    written using SQL syntax.
            key - (optional) specifies what column to use as a foreign key,
                    useful if there's more than one relation between two
                    tables.
                    
        Note: if a master object is deleted then dependent objects will have
                their references nullified if the foreign key field has
                null="true", otherwise the dependent objects will be deleted.

    "many-to-many" - this type assumes three nested elements of two kinds.
        <side> - one side of the relationship, there are two such elements
                within <relation> element. Possible attributes:
            class - (required) class name, mapped to one of the two tables;
            property - (optional) property name, created to reference the
                    other side of the relation as a collection of objects.
        <link> - specify the link table, which must have foreign key
                references to both related tables. The only attribute:
            table - (required) link table name.
        Note: the link table typically should not be mapped to any class.

    "parent-to-child" - this type assumes two nested elements.
        <parent> - more general class having fewer properties.  Possible attributes:
            class - (required) class name, mapped to the parent table;
            discr-column - (required for top-most classes in the hierarchy)
                    discriminant column, instances (rows) of different classes
                    must have different discriminant values.  If omitted then
                    look for discr-column in parent classes.
        <child> - more specific class having more properties. Possible
                attributes:
            class - (required) class name, mapped to the child table;
            discr-value - (required for concrete classes) abstract classes
                    may not have discr-value associated, and therefore they
                    can't be instantiated.
        Note: if <parent> or <child> references a class not directly mapped
                by any table definition, then new class created, it will be
                mapped to the same table as its parent class.

<!-- vim:ts=4:sts=4:sw=4:et:
-->
