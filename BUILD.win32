
** About pre-built packages for Windows **

First of all, there are pre-built packages released for Microsoft Windows
developers in form of .zip-files, to make it easier to play with the library.
These packages are built against certain version of Boost or Qt,
and also against certain version of C++ compiler (MinGW 4, MSVC 2008/2010).
A Boost-enabled package includes all the required components of Boost
libraries within itself, whereas Qt-enabled one requires you to install
proper version of Qt SDK beforehand.  Of course, you can still rebuild
YB.ORM against your toolkit/compiler of choice, because the package
contains library sources.

** Pre-built package contents **

A .zip-file containing YB.ORM library pre-built for MS Windows is extracted
at location c:\yborm by default.  All the instructions below assume this
path as root folder.  Upon extraction there is the following folder layout:

    c:\yborm
            \bin        - .dll-files that this build of YB.ORM may depend on:
                          boost_date_time, boost_thread, cppunit, libxml2,
                          sqlite3, mingw runtime;
                        - useful utilities: iconv.exe, xmllint.exe,
                          xsltproc.exe, sqlite3.exe
                        - code-generation utility: yborm_gen.exe
            \build      - build folder for the library itself
            \build-auth - build folder for the Auth demo
            \build-tut  - build folder for examples from the Tutorial
            \doc        - bits of documentation
            \examples   - compiled examples and tests, schema files,
                        - test SQLite database, convenience .bat-files
            \include    - header files for sqlite3 and:
            \include\boost      - Boost version bundled
            \include\cppunit    - CppUnit version bundled
            \include\libxml     - LibXml2 version bundled
            \include\yb         - YB.ORM itself
            \lib        - YB.ORM in form of static libraries:
                          ybutil.lib, yborm.lib (.a-files for MinGW);
                          as well as import libraries for YB.ORM dependencies
            \src        - source code of that released version

** Rebuilding YB.ORM package **

The most simple way to build YB.ORM under MS Windows is to rebuild one of
pre-built packages.  This may be useful if you already have YB.ORM installed
and just want to update your installation with fresh sources from Git.
It this case put updated sources under src folder, then "cd" into build
folder and start corresponding .bat file from there.  If you're using
MS Visual C++ you'll need to launch that .bat-file from within MS Visual C++
command line prompt.  Those .bat-files just call CMake script with
predefined configuration parameters and then run "make" command.
After build is successfully completed the new libraries, headers, examples
and code generation utility replace old versions in corresponding folders.

** Building from scratch **

WARNING!! the following info is a bit out of date

This method applies if you have Microsoft Visual C++ or Borland C++ Builder
installed.  Also these cmake scripts were tested under GNU/Linux with GCC.
Under MS Windows this method is known to work fine using the following
versions of software:
    - Microsoft Visual C++ 9.0 / 2008 Express Edition
      with boost library 1.38.0
    - Borland C++ 5.5 / Free Command Line Tools
      with boost library 1.33.1

The following directory layout is assumed in the text below:
    c:\build-yborm - everything needed for build: sources, libraries etc.
    c:\build-yborm\trunk - the source code of YB.ORM
    c:\build-yborm\b - out-of-source build directory

- Check out the code from SVN repository
Use your favorite Subversion (SVN) client.  E.g. one can be
downloaded from here: http://sourceforge.net/projects/win32svn/.
Checkout YB.ORM code:
    cd \build-yborm
    svn co https://yborm.svn.sourceforge.net/svnroot/yborm/trunk
Now c:\build-yborm\trunk\ contains YB.ORM code.

- Installing CMake build system
Download cmake-2.8.4-win32-x86.zip
from here: http://www.cmake.org/cmake/resources/software.html
May be it's better to unzip it under the root of drive C: to make it easier
to setup PATH environment variable.
For instance, if cmake.exe is found at c:\cmake2.8\bin\cmake.exe then
to be able to start cmake just by typing 'cmake' the following
command must be issued on the command line:
    set PATH=c:\cmake2.8\bin;%PATH%

- Download and install C++ Boost library.
YB.ORM uses boost.date_time, boost.thread and some templates from
this library.
Pick up sources for proper version of boost on this page:
http://www.boost.org/users/history/
For different versions steps to build may vary.

-- Building Boost 1.38.0 with MSVC 9.0
Unpack boost_1_38_0.zip to c:\build-yborm\ then start Visual Studio 2008
Command Prompt.  Issue the following commands to build boost:
    C:\>cd \build-yborm\boost_1_38_0\tools\jam\src
    C:\build-yborm\boost_1_38_0\tools\jam\src>build.bat
here goes output of build process of bjam tool
    Generating Code...
    ...updated 2 targets...
    C:\build-yborm\boost_1_38_0\tools\jam\src>cd ..\..\..
    C:\build-yborm\boost_1_38_0>tools\jam\src\bin.ntx86\bjam.exe 
      --with-date_time --with-thread --with-regex
      toolset=msvc link=shared variant=debug threading=multi stage
here goes output of build process of boost itself
    ...updated 47 targets...
    C:\build-yborm\boost_1_38_0>dir /b stage\lib
    boost_date_time-vc90-mt-gd-1_38.dll
    boost_date_time-vc90-mt-gd-1_38.lib
    boost_date_time-vc90-mt-gd.lib
    boost_regex-vc90-mt-gd-1_38.dll
    boost_regex-vc90-mt-gd-1_38.lib
    boost_regex-vc90-mt-gd.lib
    boost_thread-vc90-mt-gd-1_38.dll
    boost_thread-vc90-mt-gd-1_38.lib
    boost_thread-vc90-mt-gd.lib
For some strange reason these names are not ones the linker likes,
therefore you should create aliases:
    C:\build-yborm\boost_1_38_0>cd stage\lib
    C:\build-yborm\boost_1_38_0\stage\lib>copy boost_date_time-vc90-mt-gd-1_38.lib
      libboost_date_time-vc90-mt-gd-1_38.lib
    C:\build-yborm\boost_1_38_0\stage\lib>copy boost_thread-vc90-mt-gd-1_38.lib
      libboost_thread-vc90-mt-gd-1_38.lib
    C:\build-yborm\boost_1_38_0\stage\lib>copy boost_regex-vc90-mt-gd-1_38.lib
      libboost_regex-vc90-mt-gd-1_38.lib

- Download and install CppUnit library.
YB.ORM uses CppUnit to run unit tests.
Download the source tarball cppunit-1.12.1.tar.gz from
http://sourceforge.net/apps/mediawiki/cppunit/#Download
Unpack it under c:\build-yborm.  To extract from *.tar.gz
you can use a tool like 7-Zip (http://www.7-zip.org/).

-- Building CppUnit 1.12.1 with MSVC 9.0
Open workspace file from Visual Studio IDE:
c:\build-yborm\cppunit-1.12.1\src\CppUnitLibraries.dsw
Answer "Yes To All" when asked "Convert and open this project?"
Select from the main menu "Build" -> "Batch Build..."
Then check "cppunit_dll/Debug" item and push "Build" button.
When build is completed you will find the following files:
    C:\build-yborm>dir /b \build-yborm\cppunit-1.12.1\lib
    .keepme
    cppunitd_dll.dll
    cppunitd_dll.lib
    cppunitd_dll.pdb

- Download and unpack prebuild packages for LibXML2 and friends.
Get packages from here: ftp://xmlsoft.org/libxml2/win32/.
Unpack them to c:\build-yborm\
Packages needed:
    iconv-1.9.2.win32.zip
    libxml2-2.7.7.win32.zip
    zlib-1.2.5.win32.zip

- Build YB.ORM with cmake
Create directory for an out-of-source build, setup PATH, run cmake.
    C:\build-yborm>mkdir b
    C:\build-yborm>cd b
    C:\build-yborm\b>set PATH=c:\cmake28\bin;c:\build-yborm\boost_1_38_0\stage\lib;
      c:\build-yborm\cppunit-1.12.1\lib;c:\build-yborm\libxml2-2.7.7.win32\bin;
      c:\build-yborm\iconv-1.9.2.win32\bin;c:\build-yborm\zlib-1.2.5\bin;%PATH%
    C:\build-yborm\b>cmake -G "NMake Makefiles" --build ..\trunk
here goes some CMake output.
    -- Build files have been written to: C:/build-yborm/b
    C:\build-yborm\b>nmake
If all went fine you will find static two static libraries:
    lib\util\ybutil.lib
    lib\orm\yborm.lib

- Running tests and examples
Before running the tests and examples you will need to create tables in your
test database.  To auto-generate DDL code for the tables use yborm_gen tool,
pass a schema file to it and specify proper SQL dialect as follows:

    C:\yborm\examples>c:\yborm\bin\yborm_gen --ddl tut1.xml MYSQL


These two executables can run without any additional settings:
    lib\util\test\ybutil_unit_tests.exe
    src\orm_domain_generator.exe
These two require you to specify the test DB to connect to via 
environment variables:
    lib\orm\test\yborm_unit_tests.exe
    examples\example1.exe
Simple .BAT file can help, e.g. your examples\example1.bat may look like this:
    set YBORM_DBTYPE=MYSQL
    set YBORM_DB=test1_db
    set YBORM_USER=test1
    set YBORM_PASSWD=test1_pwd
    set EX1_DIR=c:\build-yborm\trunk\examples
    .\example1


UNSORTED:

** Creating the test user in MySQL **

>C:\AppServ\MySQL\bin\mysql.exe -u root -p mysql
Enter password:  <-- type here your root password for MySQL
mysql> create database test1 default charset utf8;
mysql> create user 'test1'@'localhost' identified by 'test1_pwd';
mysql> grant all on test1_db.* to 'test1'@'localhost';
mysql> quit


** Compiling CppUnit with MSVC 2010 **

Checkout fresh CppUnit code from SVN repo:
>svn co https://cppunit.svn.sourceforge.net/svnroot/cppunit/trunk/cppunit

Open and convert project with Visual Studio 2010: src\cppunit\cppunit_dll.vcproj
Fix Target Name in Project's Properties for Debug configuration -> General
from $(ProjectName) to cppunitd_dll  then build the Debug configuration.


** Building with Borland C++ 5.5 Free Command Line Tools **

C:\>set PATH=c:\Borland\BCC55\Bin;c:\cmake2.8\bin;c:\build-yborm\bin-bcc55;%PATH%
C:\>cd \build-yborm\libxml2-2.7.7.win32\lib
C:\build-yborm\libxml2-2.7.7.win32\lib>implib -c -a libxml2omf.lib ..\bin\libxml2.dll
Borland Implib Version 3.0.22 Copyright (c) 1991, 2000 Inprise Corporation
C:\build-yborm\libxml2-2.7.7.win32\lib>cd ..\..\iconv-1.9.2.win32\lib
C:\build-yborm\iconv-1.9.2.win32\lib>implib -c -a iconvomf.lib ..\bin\iconv.dll
Borland Implib Version 3.0.22 Copyright (c) 1991, 2000 Inprise Corporation
C:\build-yborm\iconv-1.9.2.win32\lib>

CPPUNIT
Unzip C:\build-yborm\cppunit-1.12.1\contrib\bc5\bcc-makefile.zip
to C:\build-yborm\cppunit-1.12.1\ and follow instructions found in
C:\build-yborm\cppunit-1.12.1\bcc\readme_en.txt

BOOST 1.33.1 
C:\>cd build-yborm\boost_1_33_1\
C:\build-yborm\boost_1_33_1>cd tools\build\jam_src
C:\build-yborm\boost_1_33_1\tools\build\jam_src>build.bat borland
-- bootstrapping does not work, you need to manually edit build.bat
to look like this:

...
:Guess_Toolset
REM Try and guess the toolset to bootstrap the build with...
REM Sets BOOST_JAM_TOOLSET to the first found toolset.
REM May also set BOOST_JAM_TOOLSET_ROOT to the
REM location of the found toolset.
setlocal & endlocal
call :Test_Path bcc32.exe
if not errorlevel 1 (
    set BOOST_JAM_TOOLSET=borland
    set BOOST_JAM_TOOLSET_ROOT=%FOUND_PATH%..\
    goto :eof)
...

C:\build-yborm\boost_1_33_1\tools\build\jam_src>build.bat borland
...updated 2 targets...
C:\build-yborm\boost_1_33_1\tools\build\jam_src>cd ..\..\..\
C:\build-yborm\boost_1_33_1>
C:\build-yborm\boost_1_33_1>tools\build\jam_src\bin.ntx86\bjam.exe \
  -sTOOLS=borland --with-date_time --with-thread --with-regex \
  -sBUILD="debug threading<multi>" stage

...failed updating 8 targets...
...skipped 81 targets...
...updated 106 targets...

C:\build-yborm\boost_1_33_1>
C:\build-yborm\boost_1_33_1>cd ..\
C:\build-yborm>mkdir build-bcc55
C:\build-yborm>cd build-bcc55
-- edit c:\borland\bcc55\ilink32.cfg and c:\borland\bcc55\bcc32.cfg,
append the following:

-Lc:\borland\bcc55\lib
-Lc:\borland\bcc55\lib\psdk
-Lc:\build-yborm\boost_1_33_1\stage\lib

C:\build-yborm\build-bcc55>cmake -G "Borland Makefiles" --build ..\trunk

